" C. Shen, July 2020.
" Customization
" It's highly recommended to add customizations in a separate file.
" This way, you can maintain the original vim-bootstrap generated vimrc file and subsequent updates.
" For Vim users, the files available for customization are ~/.vimrc.local and ~/.vimrc.local.bundles.
" The former handles general configuration while the latter handle external Vim plugins through vim-plug.
" https://github.com/editor-bootstrap/vim-bootstrap
" The vimrc file was modified. Do not use vim-bootstrap version to overwrite
"
" ~/.gvimrc, 08/2007, C. Shen
"
set shell=/bin/bash
behave mswin
winpos  330 5
set     lines=45
set     columns=178

" copy and paste from system clipboard
set clipboard=unnamedplus

" store its swap files in one dir. note the trailing double path separators
set directory=$HOME/.local/share/vim//

" It's set to 50 by vimrc, too wide
let g:NERDTreeWinSize = 25

if has("gui_gtk2")
"       set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
        set guifont=Consolas\ 12
"       set guifont=Terminus\ 11
endif

" To use fzf in Vim, add the following line to your .vimrc    CS: 17:53:51, Sun Nov 19 '23
set rtp+=/opt/homebrew/opt/fzf

" Mac
 set guifont=Cascadia\ Code\ Regular_Light:h13
" set guifont=Monaco:h13
" set guifont=Jetbrains\ Mono:h14
" set guifont=Consolas:h16
"
" https://github.com/cseelus/monego/tree/master/Monego      italic version of Monaco
"

set linespace=2
" enable cursorline
set cursorline

" set the mouse focus, only for GUI
set mousefocus
" hide the mouse when typing, only for GUI
" set mousehide

" Make shift-insert work like in Xterm
map  <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

imap <F1> <Esc>

set foldmethod=marker
set winaltkeys=no
set guioptions-=T       "get rid of toolbar

" I like highlighting strings inside C comments
let c_comment_strings=1
syntax on
filetype plugin indent on

" make the left and right arrow keys change line
set whichwrap+=<,>,h,l,[,]

"
" Switch on search pattern highlighting.
set         hlsearch
colorscheme evening

hi lCursor      guibg=Cyan  guifg=NONE
hi CursorLine   cterm=NONE  ctermbg=darkred  guibg=grey15

hi ColorColumn  ctermbg=0   guibg=grey15

hi NonText  guifg=lightblue      guibg=grey15
hi Constant gui=italic           guibg=black   guifg=gray80
hi Special  gui=NONE             guibg=grey5
hi Comment  gui=italic           guifg=grey65  guibg=gray15

hi MatchParen gui=bold,italic   guifg=white

hi SpellBad   guisp=yellow gui=bold,undercurl guifg=white guibg=red
hi SpellCap   guisp=white  gui=undercurl guifg=NONE guibg=NONE
hi SpellRare  guisp=blue   gui=undercurl guifg=NONE guibg=NONE
hi SpellLocal guisp=orange gui=undercurl guifg=NONE guibg=NONE

hi LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=italic guifg=gray45  guibg=gray10

" Color of NerdTree border
hi VertSplit gui=none guifg=green ctermbg=NONE
" for some reason, turning on antialias makes fonts all bold.
" I cannot find a solution, 1 May 2011 CS
" set noanti

"
" font, such as: set guifont=Fira\ Code:h13
"
let g:fnt_types = ['Fira\ Code', 'Cascadia\ Code\ Regular_Light', 'Monaco', 'Consolas']
let g:fnt_sizes = [ 13, 13, 13, 14 ]


let g:fnt_index = 0
let g:fnt_size  = g:fnt_sizes[g:fnt_index]

function! ResetFont ()
  if has('gui_running')
    exe ':set guifont=' . g:fnt_types[g:fnt_index] . ':h' . string(g:fnt_size)
  endif
endfunction
function! CycleFont()
  let g:fnt_index = (g:fnt_index + 1) % len(g:fnt_types)
  let g:fnt_size  = g:fnt_sizes[g:fnt_index]
  call ResetFont()
endfunction
function! FontSizePlus ()
  let g:fnt_size = g:fnt_size + 1
  call ResetFont()
endfunction
function! FontSizeMinus ()
  let g:fnt_size = g:fnt_size - 1
  call ResetFont()
endfunction
function! FontOriginal()
  if has('gui_running')
    exe ':set guifont=' . g:fnt_types[0] . ':h' . string(g:fnt_sizes[0])
  endif
endfunction
function! FontInfo()
    let l:finfo = substitute( &guifont, ":h", ":", "")
    return '[' . l:finfo . ']'
endfunction

nnoremap ++ :call FontSizePlus()<cr>
nnoremap -- :call FontSizeMinus()<cr>
nnoremap == :call FontOriginal()<cr>
nnoremap ;; :call CycleFont()<cr>

" cc to toggle comment for 'tomtom/tcomment_vim'
nmap cc :TComment<CR>j


" enable setting title
set title
" configure title
set titlestring=macvim:\ %-25.55F\ %m\ %{FontInfo()}  titlelen=100

" automatically removing all trailing whitespace
autocmd FileType c,cpp,python,vim,sh  autocmd BufWritePre <buffer> %s/\s\+$//e


" Python
au BufNewFile,BufRead *.py set colorcolumn=80
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py setlocal foldmethod=indent

let g:ale_linters = {
      \   'python': ['autopep8', 'pylint'],
      \   'shell': ['shellcheck'],
      \}

" Showing the total number of warnings and errors in the status line
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'âœ¨ [OK] âœ¨' : printf(
        \   'ðŸ˜ž %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=\ %{LinterStatus()}


filetype plugin on
augroup filetypedetect
	au! BufNewFile,BufRead *.jemdoc setf jemdoc
augroup END

" Last line is for proper wrapping of jemdoc lists, etc.
autocmd Filetype jemdoc setlocal comments=:#,fb:-,fb:.,fb:--,fb:..,fb:\:

au! BufNewFile,BufRead *.sh setlocal ft=bash

" for fish files, auto indent before saving, '' --> returns to the original position
" autocmd BufWritePre *.fish :normal gg=G
" autocmd BufWritePre *.sh :normal gg=G

noremap == =Gj


" Terminal colorscheme
if ! has("gui_running")
    colorscheme desert
endif

if has("gui_running")
    set fuoptions=maxvert,maxhorz " fullscreen options (MacVim only), resized window when changed to fullscreen
    set transparency=3
endif


" https://vim.fandom.com/wiki/Restore_screen_size_and_position
if has("gui_running")
    function! ScreenFilename()
        if has('amiga')
            return "s:.vimsize"
        elseif has('win32')
            return $HOME.'\_vimsize'
        else
            return $HOME.'/.local/share/vim/vimsize'
        endif
    endfunction

    function! ScreenRestore()
        " Restore window size (columns and lines) and position
        " from values stored in vimsize file.
        " Must set font first so columns and lines are based on font size.
        let f = ScreenFilename()
        if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
            let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
            for line in readfile(f)
                let sizepos = split(line)
                if len(sizepos) == 5 && sizepos[0] == vim_instance
                    silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
                    silent! execute "winpos ".sizepos[3]." ".sizepos[4]
                    return
                endif
            endfor
        endif
    endfunction

    function! ScreenSave()
        " Save window size and position.
        if has("gui_running") && g:screen_size_restore_pos
            let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
            let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
                        \ (getwinposx()<0?0:getwinposx()) . ' ' .
                        \ (getwinposy()<0?0:getwinposy())
            let f = ScreenFilename()
            if filereadable(f)
                let lines = readfile(f)
                call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
                call add(lines, data)
            else
                let lines = [data]
            endif
            call writefile(lines, f)
        endif
    endfunction

    if !exists('g:screen_size_restore_pos')
        let g:screen_size_restore_pos = 1
    endif
    if !exists('g:screen_size_by_vim_instance')
        let g:screen_size_by_vim_instance = 1
    endif
    autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
    autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif


" Transparent editing of age encrypted files. CS: 23 Oct 2024 16:39
augroup encrypted
    au!
    " First make sure nothing is written to ~/.viminfo while editing
    " an encrypted file.
    autocmd BufReadPre,FileReadPre      *.age set viminfo=
    " We don't want a swap file, as it writes unencrypted data to disk
    autocmd BufReadPre,FileReadPre      *.age set noswapfile
    " Switch to binary mode to read the encrypted file
    autocmd BufReadPre,FileReadPre      *.age set bin
    autocmd BufReadPre,FileReadPre      *.age let ch_save = &ch|set ch=2
    autocmd BufReadPre,FileReadPre      *.age let shsave=&sh
    autocmd BufReadPre,FileReadPre      *.age let &sh='bash'
    autocmd BufReadPre,FileReadPre      *.age let ch_save = &ch|set ch=2

    " autocmd BufReadPost,FileReadPost    *.age '[,']!gpg --decrypt --default-recipient-self 2> /dev/null
    autocmd BufReadPost,FileReadPost    *.age '[,']! age -d -i ~/.config/age/cs.priv.key 2> /dev/null

    autocmd BufReadPost,FileReadPost    *.age let &sh=shsave
    " Switch to normal mode for editing
    autocmd BufReadPost,FileReadPost    *.age set nobin
    autocmd BufReadPost,FileReadPost    *.age let &ch = ch_save|unlet ch_save

    autocmd BufReadPost,FileReadPost    *.age execute ":doautocmd BufReadPost " . expand("%:r")
    " Convert all text to encrypted text before writing
    autocmd BufWritePre,FileWritePre    *.age set bin
    autocmd BufWritePre,FileWritePre    *.age let shsave=&sh
    autocmd BufWritePre,FileWritePre    *.age let &sh='bash'

    " autocmd BufWritePre,FileWritePre    *.age '[,']!gpg --encrypt --default-recipient-self 2>/dev/null
    autocmd BufWritePre,FileWritePre    *.age '[,']!age -r $(head -1 ~/.config/age/cs.pub.key) 2>/dev/null

    autocmd BufWritePre,FileWritePre    *.age let &sh=shsave
    " Undo the encryption so we are back in the normal text, directly
    " after the file has been written.
    autocmd BufWritePost,FileWritePost  *.age silent u
    autocmd BufWritePost,FileWritePost  *.age set nobin
augroup END




" CS: 20 Oct 2024 10:28
iab <expr> ttime strftime('CS: %e %b %Y %H:%M')

" I do not use jemdoc anymore
" jemdoc syntax file at:  https://raw.githubusercontent.com/jem/jemdoc/master/www/dist/jemdoc.vim
" ":call system(' [ ! -f $HOME/.vim/syntax/jemdoc.vim ] && mkdir -p $HOME/.vim/syntax/ && cd $HOME/.vim/syntax/ && wget https://raw.githubusercontent.com/jem/jemdoc/master/www/dist/jemdoc.vim ')

:set conceallevel=0 " could also set for just *.json,*.md etc
:let g:vim_json_conceal=0
:let g:markdown_syntax_conceal=0

" vim: set ft=vim ts=4 sw=4 tw=80:
